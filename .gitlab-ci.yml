stages:
  - test
  - bump
  - lint
  - security

# ---------- GitLab SAST Security Scanning ----------
include:
  - template: Security/SAST.gitlab-ci.yml

# ---------- Variables ----------
variables:
  VERSION_FILE: "app/__version__.py"

# ---------- Bump Version ----------
bump_version:
  stage: bump
  image: python:3.13
  only:
    refs:
      - main
  script:
    - pip install bump2version
    - git config user.name "GitLab CI"
    - git config user.email "ci@gitlab.com"
    - git remote set-url origin "https://gitlab-ci-token:${GITLAB_TOKEN}@gitlab.com/tahaomar001/fastapi-skilton.git"
    - >
      COMMIT_MSG="$(git log -1 --pretty=%B)" &&
      echo "Commit: $COMMIT_MSG" &&
      if echo "$COMMIT_MSG" | grep -q "#major"; then
        bump2version --allow-dirty --verbose major $VERSION_FILE;
      elif echo "$COMMIT_MSG" | grep -q "#minor"; then
        bump2version --allow-dirty --verbose minor $VERSION_FILE;
      else
        bump2version --allow-dirty --verbose patch $VERSION_FILE;
      fi
    - git push origin HEAD:main
    - git push origin --tags

# ---------- Linting ----------
lint:
  stage: lint
  image: python:3.13
  before_script:
    - pip install --upgrade pip
    - pip install bandit black codespell flake8 flake8-2020 flake8-bugbear flake8-comprehensions isort mypy pyupgrade
  script:
    - echo "Running flake8..."
    - flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --show-source --statistics
    - echo "Running black..."
    - black --check .
    - echo "Running isort..."
    - isort --check-only --profile black .
    - echo "Running mypy..."
    - mkdir -p .mypy_cache
    - mypy --ignore-missing-imports --install-types --non-interactive .
    - echo "Running codespell..."
    - codespell .

# ---------- Custom Security Checks ----------
custom_security_checks:
  stage: security
  image: python:3.13
  before_script:
    - pip install --upgrade pip
    - pip install bandit safety
  script:
    - echo "Running bandit..."
    - bandit --recursive --skip B101,B105 .
    - echo "Running safety..."
    - pip install -r requirements.txt || pip install --editable . || pip install .
    - safety check
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
